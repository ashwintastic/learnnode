IncomingMessage {
    _readableState:
        ReadableState {
        objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            defaultEncoding: 'utf8',
            ranOut: false,
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null },
    readable: false,
        domain: null,
        _events: {},
    _eventsCount: 0,
        _maxListeners: undefined,
        socket:
    Socket {
        connecting: false,
            _hadError: false,
            _handle:
        TCP {
            bytesRead: 638,
                _externalStream: {},
            fd: 17,
                reading: true,
                owner: [Circular],
                onread: [Function: onread],
            onconnection: null,
                writeQueueSize: 0,
                _consumed: true },
        _parent: null,
            _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: [Object],
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                defaultEncoding: 'utf8',
                ranOut: false,
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            domain: null,
            _events:
        { end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Object],
                timeout: [Function: bound socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: bound socketOnError],
            close: [Object],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: true,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: true,
            destroyed: false,
            _bytesDispatched: 0,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _server:
            Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _idleTimeout: 120000,
            _idleNext:
        TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idlePrev:
            TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idleStart: 11702,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                _consumed: true,
                socket: [Circular],
                incoming: [Circular],
                outgoing: null,
                maxHeaderPairs: 2000,
                onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
            read: [Function],
            _consuming: true,
            _httpMessage:
        ServerResponse {
            domain: null,
                _events: [Object],
                _eventsCount: 1,
                _maxListeners: undefined,
                output: [],
                outputEncodings: [],
                outputCallbacks: [],
                outputSize: 0,
                writable: true,
                _last: false,
                upgrading: false,
                chunkedEncoding: false,
                shouldKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: true,
                _removedHeader: {},
            _contentLength: null,
                _hasBody: true,
                _trailer: '',
                finished: false,
                _headerSent: false,
                socket: [Circular],
                connection: [Circular],
                _header: null,
                _headers: [Object],
                _headerNames: [Object],
                _onPendingData: [Function: bound updateOutgoingData],
            _sent100: false,
                _expect_continue: false,
                req: [Circular],
                locals: {} } },
    connection:
        Socket {
        connecting: false,
            _hadError: false,
            _handle:
        TCP {
            bytesRead: 638,
                _externalStream: {},
            fd: 17,
                reading: true,
                owner: [Circular],
                onread: [Function: onread],
            onconnection: null,
                writeQueueSize: 0,
                _consumed: true },
        _parent: null,
            _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: [Object],
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                defaultEncoding: 'utf8',
                ranOut: false,
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            domain: null,
            _events:
        { end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Object],
                timeout: [Function: bound socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: bound socketOnError],
            close: [Object],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: true,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: true,
            destroyed: false,
            _bytesDispatched: 0,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _server:
            Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _idleTimeout: 120000,
            _idleNext:
        TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idlePrev:
            TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idleStart: 11702,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                _consumed: true,
                socket: [Circular],
                incoming: [Circular],
                outgoing: null,
                maxHeaderPairs: 2000,
                onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
            read: [Function],
            _consuming: true,
            _httpMessage:
        ServerResponse {
            domain: null,
                _events: [Object],
                _eventsCount: 1,
                _maxListeners: undefined,
                output: [],
                outputEncodings: [],
                outputCallbacks: [],
                outputSize: 0,
                writable: true,
                _last: false,
                upgrading: false,
                chunkedEncoding: false,
                shouldKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: true,
                _removedHeader: {},
            _contentLength: null,
                _hasBody: true,
                _trailer: '',
                finished: false,
                _headerSent: false,
                socket: [Circular],
                connection: [Circular],
                _header: null,
                _headers: [Object],
                _headerNames: [Object],
                _onPendingData: [Function: bound updateOutgoingData],
            _sent100: false,
                _expect_continue: false,
                req: [Circular],
                locals: {} } },
    httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers:
    { host: 'localhost:8000',
        connection: 'keep-alive',
        'content-length': '167',
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36',
        'cache-control': 'no-cache',
        origin: 'chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop',
        'postman-token': 'a4ab52dd-b14b-3c61-4f4c-b637a8abbb4b',
        'content-type': 'application/json',
        accept: '*/*',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9' },
    rawHeaders:
        [ 'Host',
            'localhost:8000',
            'Connection',
            'keep-alive',
            'Content-Length',
            '167',
            'User-Agent',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36',
            'Cache-Control',
            'no-cache',
            'Origin',
            'chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop',
            'Postman-Token',
            'a4ab52dd-b14b-3c61-4f4c-b637a8abbb4b',
            'Content-Type',
            'application/json',
            'Accept',
            '*/*',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Accept-Language',
            'en-US,en;q=0.9' ],
            trailers: {},
    rawTrailers: [],
        upgrade: false,
        url: '/registerDriver',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client:
    Socket {
        connecting: false,
            _hadError: false,
            _handle:
        TCP {
            bytesRead: 638,
                _externalStream: {},
            fd: 17,
                reading: true,
                owner: [Circular],
                onread: [Function: onread],
            onconnection: null,
                writeQueueSize: 0,
                _consumed: true },
        _parent: null,
            _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: [Object],
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                defaultEncoding: 'utf8',
                ranOut: false,
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            domain: null,
            _events:
        { end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Object],
                timeout: [Function: bound socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: bound socketOnError],
            close: [Object],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: true,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: true,
            destroyed: false,
            _bytesDispatched: 0,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _server:
            Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::8000' },
        _idleTimeout: 120000,
            _idleNext:
        TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idlePrev:
            TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idleStart: 11702,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                _consumed: true,
                socket: [Circular],
                incoming: [Circular],
                outgoing: null,
                maxHeaderPairs: 2000,
                onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
            read: [Function],
            _consuming: true,
            _httpMessage:
        ServerResponse {
            domain: null,
                _events: [Object],
                _eventsCount: 1,
                _maxListeners: undefined,
                output: [],
                outputEncodings: [],
                outputCallbacks: [],
                outputSize: 0,
                writable: true,
                _last: false,
                upgrading: false,
                chunkedEncoding: false,
                shouldKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: true,
                _removedHeader: {},
            _contentLength: null,
                _hasBody: true,
                _trailer: '',
                finished: false,
                _headerSent: false,
                socket: [Circular],
                connection: [Circular],
                _header: null,
                _headers: [Object],
                _headerNames: [Object],
                _onPendingData: [Function: bound updateOutgoingData],
            _sent100: false,
                _expect_continue: false,
                req: [Circular],
                locals: {} } },
    _consuming: true,
        _dumped: false,
        next: [Function: next],
    baseUrl: '',
        originalUrl: '/registerDriver',
        _parsedUrl:
    Url {
        protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/registerDriver',
            path: '/registerDriver',
            href: '/registerDriver',
            _raw: '/registerDriver' },
    params: { '0': '/registerDriver' },
    query: {},
    res:
        ServerResponse {
        domain: null,
            _events: { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
            _maxListeners: undefined,
            output: [],
            outputEncodings: [],
            outputCallbacks: [],
            outputSize: 0,
            writable: true,
            _last: false,
            upgrading: false,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            useChunkedEncodingByDefault: true,
            sendDate: true,
            _removedHeader: {},
        _contentLength: null,
            _hasBody: true,
            _trailer: '',
            finished: false,
            _headerSent: false,
            socket:
        Socket {
            connecting: false,
                _hadError: false,
                _handle: [Object],
                _parent: null,
                _host: null,
                _readableState: [Object],
                readable: true,
                domain: null,
                _events: [Object],
                _eventsCount: 10,
                _maxListeners: undefined,
                _writableState: [Object],
                writable: true,
                allowHalfOpen: true,
                destroyed: false,
                _bytesDispatched: 0,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Object],
                _server: [Object],
                _idleTimeout: 120000,
                _idleNext: [Object],
                _idlePrev: [Object],
                _idleStart: 11702,
                parser: [Object],
                on: [Function: socketOnWrap],
            _paused: false,
                read: [Function],
                _consuming: true,
                _httpMessage: [Circular] },
        connection:
            Socket {
            connecting: false,
                _hadError: false,
                _handle: [Object],
                _parent: null,
                _host: null,
                _readableState: [Object],
                readable: true,
                domain: null,
                _events: [Object],
                _eventsCount: 10,
                _maxListeners: undefined,
                _writableState: [Object],
                writable: true,
                allowHalfOpen: true,
                destroyed: false,
                _bytesDispatched: 0,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Object],
                _server: [Object],
                _idleTimeout: 120000,
                _idleNext: [Object],
                _idlePrev: [Object],
                _idleStart: 11702,
                parser: [Object],
                on: [Function: socketOnWrap],
            _paused: false,
                read: [Function],
                _consuming: true,
                _httpMessage: [Circular] },
        _header: null,
            _headers: { 'x-powered-by': 'Express' },
        _headerNames: { 'x-powered-by': 'X-Powered-By' },
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
            _expect_continue: false,
            req: [Circular],
            locals: {} },
    body:
    { name: 'my test vehicle name22',
        vNumber: '546kt',
        maxCapacity: 7,
        vehicleDocs: [ 'sdsdsd', 'sdsdsdsw' ],
        vehicleBelongsTo: '59fea617c993b81ef30e788f' },
    _body: true,
        length: undefined,
        read: [Function],
        route:
    Route {
        path: '*',
            stack:
        [ [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object] ],
            methods: } }

